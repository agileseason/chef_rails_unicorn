#!/bin/bash
### BEGIN INIT INFO
# Provides:          <%=@app_name %>
# Required-Start:    $all
# Required-Stop:     $network $local_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start the <%=@app_name %> unicorns at boot
# Description:       Enable <%=@app_name %> at boot time.
### END INIT INFO

APP_NAME=<%= @app_name %>
APP_USER=<%= @app_user %>
APP_ENV=<%= @app_env %>
APP_ROOT=<%= @app_root %>
APP_SHARED=<%= @app_shared %>

PID_FILE="$APP_SHARED/tmp/pids/unicorn.pid"
PID_FILE_OLD="$PID_FILE.oldbin"

EXECUTABLE="unicorn"
EXECUTABLE_OPTS="-D -E $APP_ENV -c $APP_ROOT/config/unicorn/$APP_ENV.rb"

RBENV_ROOT="/home/$APP_USER/.rbenv"
PATH="$RBENV_ROOT/bin:$RBENV_ROOT/shims:$PATH"
START_CMD="bundle exec $EXECUTABLE $EXECUTABLE_OPTS"

CMD="$START_CMD > /dev/null 2>&1 &"

if [ -d $APP_ROOT ]
then
  cd $APP_ROOT
else
  if [ "$1" = 'stop' ]
  then
    exit 0
  else
    exit 1
  fi
fi

start_app() {
  [ -d $APP_ROOT ] || (echo "$APP_ROOT not found! Exiting..."; exit 1)

  cd $APP_ROOT
  sudo -u $APP_USER -H bash -l -c "RAILS_ENV=$APP_ENV $CMD"
}

sig () {
  test -s "$PID_FILE" && kill -$1 `cat $PID_FILE`
}

oldsig () {
  test -s $PID_FILE_OLD && kill -$1 `cat $PID_FILE_OLD`
}

case ${1-help} in
  start)
    sig 0 && echo >&2 "Already running" && exit 0
    start_app
    ;;
  stop)
    sig QUIT && exit 0
    echo >&2 "Not running"
    ;;
  force-stop)
    sig TERM && exit 0
    echo >&2 "Not running"
    ;;
  restart|reload)
    sig HUP && echo reloaded OK && exit 0
    echo >&2 "Couldn't reload, starting '$CMD' instead"
    start_app
    ;;
  upgrade)
    sig USR2 && exit 0
    echo >&2 "Couldn't upgrade, starting '$CMD' instead"
    start_app
    ;;
  rotate)
    sig USR1 && echo rotated logs OK && exit 0
    echo >&2 "Couldn't rotate logs" && exit 1
    ;;
  *)
    echo >&2 "Usage: $0 <start|stop|restart|upgrade|rotate|force-stop>"
    exit 1
    ;;
esac
